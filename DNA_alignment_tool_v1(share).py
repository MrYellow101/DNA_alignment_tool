# -*- coding: utf-8 -*-
"""
Created on Mon Sep 20 13:10:39 2021

@author: Shaw
"""


import pymed
conda install pymed


def alignment(seq1, seq2, frag_len = 8, increment = 1):
    """Shows aliqnment of two input sequences.
    
    INPUT:
    seq1, seq2 = str input sequences, may contain 'enter' characters
    frag_len = int, length of fragment from seq1 tested for in seq2 each iteration (and v/v)
    increment = int, displacement of fragment along seq1 to perform each iteration (and v/v)
    
    OUTPUT:
    match1_list = binary list, for each iteration if seq1 fragment was in seq2 this is indicated by a 1. No match indicated by a 0. 
    match2_list = binary list, for each iteration if seq2 fragment was in seq1 this is indicated by a 1. No match indicated by a 0. 
    change1_list = list of str, each time no match is found, a text string is added indicating the start and end of the non-matching fragment in seq1
    change2_list = list of str, each time no match is found, a text string is added indicating the start and end of the non-matching fragment in seq2
    """
    
    seq1 = seq1.replace("\n","")
    seq2 = seq2.replace("\n","")
    seq1_len = len(seq1)
    seq2_len = len(seq2)
    
    s = 0
    e = frag_len
    match1_list = []
    change1_list = []
    result = 0
    result_test = 0
    
    while e < seq1_len:
        result = 0
        if seq1[s:e] in seq2:
            result = 1
        match1_list.append(result)
        if result_test != result:
            report = "Transition at start = {}, end = {}".format(s,e)
            change1_list.append(report)
        result_test = result
        s += increment
        e += increment
    print("Seq1 in Seq2:")
    print(match1_list)
    print("")
    
    
    s = 0
    e = frag_len
    match2_list = []
    change2_list = []
    result = 0
    result_test = 0
    
    while e < seq2_len:
        result = 0
        if seq2[s:e] in seq1:
            result = 1
        match2_list.append(result)
        if result_test != result:
            report = "Transition at start = {}, end = {}".format(s,e)
            change2_list.append(report)
        result_test = result

        s += increment
        e += increment
    print("Seq2 in Seq1:")
    print(match2_list)
    
    return match1_list, match2_list, change1_list, change2_list

def compliment(seq_in, reverse = True):
    """Returns the complimentary sequence of a given genome sequence, with the option to reverse sequence orientation
    """
    seq_out = seq_in
    table = seq_out.maketrans("TGAC","ACTG","/n")
    seq_out = seq_out.translate(table)
    if reverse == True:
        seq_out = seq_out[::-1]
    return seq_out
    
# ------- EXAMPLES ------- #     
    

# Here two versions of the same gene are given. The tool helps identify where the former is loated within the latter, and whether there are any differences between the matching sequences
IL11_2 = """CCGCTCCTGCCCCCTGCCCTGGGGAACCCCTGGCCTGTGGGGACATGAACTGTGTTTGTCGCCTGGTCCT
GGTGGTGCTGAGCCTCTGGCCAGATAGAGTCGTTGCCCCTGGGCCACCAGCTGGCTCCCCTCGAGTCTCT
TCAGACCCTCGAGCAGATCTGGACAGCGCTGTTCTCCTAACCCGATCCCTCCTGGCAGACACACGGCAAC
TAGCTGCACAGATGAGAGACAAATTCCCAGCTGACGGAGATCACAGTCTGGACTCCCTGCCCACCTTGGC
CATGAGCGCTGGGACATTGGGATCTTTGCAGCTTCCTGGTGTGCTGACAAGGCTTCGAGTAGACTTGATG
TCCTACCTCCGGCATGTACAATGGCTGCGCCGTGCAGGTGGTCCTTCCCTAAAGACTCTGGAGCCAGAGC
TGGGTGCCCTGCAAGCCCGACTGGAACGGCTACTCCGCCGTTTACAGCTCTTGATGTCTCGCCTGGCCTT
GCCCCAGGCAGCCCCAGACCAACCTGTGATCCCCCTGGGCCCTCCTGCCTCAGCCTGGGGAAGCATCCGG
GCAGCTCATGCCATCCTAGGAGGGCTGCACCTGACCTTGGACTGGGCCGTGCGGGGCCTGCTGTTGTTAA
AGACTCGACTGTGACTCGGGACTGAAAACCACCATCGATACCGCCCTTTAAAACCAGATCTTATTTATTT
ATTTATTTTGGTACTTGGAGGGGGGCATGATGATCAGGGGCATGCCACACCCCAAACAACCGCCCCACAC
CCAGCTAGACAGTCTTTCCAGTAGACCTGGGTGAGGGGGATCACCTGTGGCTTATTTATACTTATTTATT
TAAACAATTGGGGGGTGGGTGGGTGCATCTGAGACCCTGAAGAGCAGGGAACTGAGATCCTGGGTTCTGG
GGTCTCTATGAAATCTGTTCACAGTGTCTTCCTCACTTCCTACATTATTTATTAAACGATTACTTTTTAT
ATTAAGAGGAGGAAGGAGGGAAGCCGGGCGTGGTGGCGCATGCCTTTAATCCCAGCACTCGGGAGGCAGA
GGCAGGCAGATTTCTGAGTTCGAGGCCAGCCTGGTCTAAGAGTGAGTTCGTGAGTTCCAGGACAGCCAGG
GCTACACAGAGAAACCCTGTCTCGAAAAACCAAAAAGCGGCCGC"""

IL11_4 = """TGCCTGGCCCTTGCTGCTCACACTCACAAACCTCCCCTCCCCAGGCCGAGGCCCAGCTGACCCCCTGGGT
CCCCCGGCAGCGGACAGGGAAGGGTTAAAGCCCCCCCCCCCGGCTCCCTGCCCCCTGCCCTGGGGAACCC
CTGGCCTGTGGGGACATGAACTGTGTTTGTCGCCTGGTCCTGGTGGTGCTGAGCCTCTGGCCAGATAGAG
TCGTTGCCCCTGGGCCACCAGCTGGCTCCCCTCGAGTCTCTTCAGACCCTCGAGCAGATCTGGACAGCGC
TGTTCTCCTAACCCGATCCCTCCTGGCAGACACACGGCAACTAGCTGCACAGATGAGAGACAAATTCCCA
GCTGACGGAGATCACAGTCTGGACTCCCTGCCCACCTTGGCCATGAGCGCTGGGACATTGGGATCTTTGC
AGCTTCCTGGTGTGCTGACAAGGCTTCGAGTAGACTTGATGTCCTACCTCCGGCATGTACAATGGCTGCG
CCGTGCAGGTGGTCCTTCCCTAAAGACTCTGGAGCCAGAGCTGGGTGCCCTGCAAGCCCGACTGGAACGG
CTACTCCGCCGTTTACAGCTCTTGATGTCTCGCCTGGCCTTGCCCCAGGCAGCCCCAGACCAACCTGTGA
TCCCCCTGGGCCCTCCTGCCTCAGCCTGGGGAAGCATCCGGGCAGCTCATGCCATCCTAGGAGGGCTGCA
CCTGACCTTGGACTGGGCCGTGCGGGGCCTGCTGTTGTTAAAGACTCGACTGTGACTCGGGACTGAAAAC
CACCATCGATACCGCCCTTTAAAACCAGATCTTATTTATTTATTTATTTTGGTACTTGGAGGGGGGCATG
ATGATCAGGGGCATGCCACACCCCAAACAACCGCCCCACACCCAGCTAGACAGTCTTTCCAGTAGACCTG
GGTGAGGGGGATCACCTGTGGCTTATTTATACTTATTTATTTAAACAATTGGGGGGTGGGTGGGTGCATC
TGAGACCCTGAAGAGCAGGGAACTGAGATCCTGGGTTCTGGGGTCTCTATGAAATCTGTTCACAGTGTCT
TCCTCACTTCCTACATTATTTATTAAACGATTACTTTTTATATTAAGAGGAGGAAGGAGGGAAGCCGGGC
GTGGTGGCGCATGCCTTTAATCCCAGCACTCGGGAGGCAGAGGCAGGCAGATTTCTGAGTTCGAGGCCAG
CCTGGTCTAAGAGTGAGTTCGTGAGTTCCAGGACAGCCAGGGCTACACAGAGAAACCCTGTCTCGAAAAA
CCAAAAAAAAAAAAAAAAAAAAAGAGGAGGAAGGAGGGGGAAAAAGGAAGCCTGGGGTTTTATACCAAAA
TGTGAGTTTTTTTTTGTGAGTCAGAGAAGTGAGAGGATTTAAATACATATCTATTTAGAGGTTATTAGCA
GGAGTATGCCGAAAGGATCGGAGTCTAAACTGGTACCCTAGCATTTCAAAGGTCCTCAACAGATACTTAA
CAAAAAGTTCCAGAGCATCACCTTATAACTAATAGCACCTGTATGGTACAGAGCTGTAAGGTACAAGGTT
TTTTGTTTCAGCAAAATTCACGATGACCAATGGGAAACAATCTAGGCTTTCTGGGGGGCGGGCAGGGGAT
GGATGAATAAAGCTAGGGATACATCCGCATGATGAAGTTCTAGCTCGCCAACCATAAAAAGGCAAGTTCC
AGGCGAAGACTGCTTTAGATATTGAACGTCTCTGCGACCCAGGAGCAGCAGATGGTAGAACTACTCTCCC
TATACATGAGTATGGACTGTTTGGTTTTTCAAAATGGAAACACCATGATGTTGACGATAGCTGCCTCAGG
GCTGAAAACAAGCAATGGCACAGTGGGTGACTGTTACTGTTTGTGTTTGCATTTTCCAGAGTTTTCACCA
TGACTGTATTTTGCAGGACACATTTATAAACATTAATAAACACTATTTTTAGAAAAAAA"""

match1, match1, change1, change2 = alignment(IL11_2, IL11_4)

# Here, the locations of various fragments within a gene are tested.

vegfa = """AGCGCAGAGGCTTGGGGCAGCCGAGCTGCAGCGAGGCCGCGGCACTGGGGGCGAGCTGAGCGGCGGCAGC
GGAGCTCTGTCGCGAGACGCAGCGACAAGGCAGACTATTCAGCGGACTCACCAGCCCGGGAGTCTGTGCT
CTGGGATTTGATATTCAAACCTCTTAATTTTTTTTTCTTAAACTGTATTGTTTTACGCTTTAATTTATTT
TTGCTTCCTATTCCCCTCTTAAATCGTGCCAACGGTTTGAGGAGGTTGGTTCTTCACTCCCTCAAATCAC
TTCGGATTGTGGAAATCAGCAGACGAAAGAGGTATCAAGAGCTCCAGAGAGAAGTCAAGGAAGAGAGAGA
GAGACCGGTCAGAGAGAGCGCGCTGGCGAGCGAACAGAGAGAGGGACAGGGGCAAAGTGACTGACCTGCT
TTTGGGGGTGACCGCCAGAGCGCGGCGTGAGCCCTCCCCCTTGGGATCTTGCATCGGACCAGTCGCGCTG
ACGGACAGACAGACAGACACCGCCCCCAGCCCCAGCGCCCACCTCCTCGCCGGCGGGCTGCCGACGGTGG
ACGCGGCGGCGAGCCGCGAGGAACCGAAGCCCGCGCCCGGAGGCGGGGTGGAGGGGGTCGGGGCTCGCGG
GATTGCACGGAAACTTTTCGTCCAACTTCTGGGCTCTTCTCGCTCCGTAGTAGCCGTGGTCTGCGCCGCA
GGAGACAAACCGATCGGAGCTGGGAGAAGTGCTAGCTCGGGCCTGGAGAAGCCGGGGCCCGAGAAGAGAG
GGGAGGAAGAGAAGGAAGAGGAGAGGGGGCCGCAGTGGGCGCTCGGCTCTCAGGAGCCGAGCTCATGGAC
GGGTGAGGCGGCCGTGTGCGCAGACAGTGCTCCAGCCGCGCGCGCGCCCCAGGCCCCGGCCCGGGCCTCG
GTTCCAGAAGGGAGAGGAGCCCGCCAAGGCGCGCAAGAGAGCGGGCTGCCTCGCAGTCCGAGCCGGAGAG
GGAGCGCGAGCCGCGCCGGCCCCGGACGGGCCTCCGAAACCATGAACTTTCTGCTCTCTTGGGTGCACTG
GACCCTGGCTTTACTGCTGTACCTCCACCATGCCAAGTGGTCCCAGGCTGCACCCACGACAGAAGGAGAG
CAGAAGTCCCATGAAGTGATCAAGTTCATGGATGTCTACCAGCGAAGCTACTGCCGTCCGATTGAGACCC
TGGTGGACATCTTCCAGGAGTACCCCGACGAGATAGAGTACATCTTCAAGCCGTCCTGTGTGCCGCTGAT
GCGCTGTGCAGGCTGCTGTAACGATGAAGCCCTGGAGTGCGTGCCCACGTCAGAGAGCAACATCACCATG
CAGATCATGCGGATCAAACCTCACCAAAGCCAGCACATAGGAGAGATGAGCTTCCTACAGCACAGCAGAT
GTGAATGCAGACCAAAGAAAGACAGAACAAAGCCAGAAAAAAAATCAGTTCGAGGAAAGGGAAAGGGTCA
AAAACGAAAGCGCAAGAAATCCCGGTTTAAATCCTGGAGCGTTCACTGTGAGCCTTGTTCAGAGCGGAGA
AAGCATTTGTTTGTCCAAGATCCGCAGACGTGTAAATGTTCCTGCAAAAACACAGACTCGCGTTGCAAGG
CGAGGCAGCTTGAGTTAAACGAACGTACTTGCAGATGTGACAAGCCAAGGCGGTGAGCCAGGCTGCAGGA
AGGAGCCTCCCTCAGGGTTTCGGGAACCAGACCTCTCACCGGAAAGACCGATTAACCATGTCACCACCAC
GCCATCATCGTCACCGTTGACAGAACAGTCCTTAATCCAGAAAGCCTGACATGAAGGAAGAGGAGACTCT
TCGAGGAGCACTTTGGGTCCGGAGGGCGAGACTCCGGCAGACGCATTCCCGGGCAGGTGACCAAGCACGG
TCCCTCGTGGGACTGGATTCGCCATTTTCTTATATCTGCTGCTAAATCGCCAAGCCCGGAAGATTAGGGT
TGTTTCTGGGATTCCTGTAGACACACCCACCCACATACACACATATATATATATTATATATATAAATAAA
TATATATGTTTTATATATAAAATATATATATATTCTTTTTTTTAAATTAACTCTGCTAATGTTATTGGTG
TCTTCACTGGATATGTTTGACTGCTGTGGACTTGTGTTGGGAGGAGGATGTCCTCACTCGGATGCCGACA
CGGGAGACAATGGGATGAAAGGCTTCAGTGTGGTCTGAGAGAGGCCGAAGTCCTTTTGCCTGCCGGGGAG
CAAGCAAGGCCAGGGCACGGGGGCACATTGGCTCACTTCCAGAAACACGACAAACCCATTCCTGGCCCTG
AGTCAAGAGGACAGAGAGACAGATGATGACAGAGAAAGAGATAAAGATGCCGGTTCCAACCAGAAGTTTG
GGGAGCCTCAGGACATGGCATGCTTTGTGGATCCCCATGATAGTCTACAAAAGCACCCCGCCCCTCTGGG
CACTGCCTGGAAGAATCGGGAGCCTGGCCAGCCTTCAGCTCGCTCCTCCACTTCTGAGGGGCCTAGGAGG
CCTCCCACAGGTGTCCCGGCAAGAGAAGACACGGTGGTGGAAGAAGAGGCCTGGTAATGGCCCCTCCTCC
TGGGACCCCTTCGTCCTCTCCTTACCCCACCTCCTGGGTACAGCCCAGGAGGACCTTGTGTGATCAGACC
ATTGAAACCACTAATTCTGTCCCCAGGAGACTTGGCTGTGTGTGTGAGTGGCTTACCCTTCCTCATCTTC
CCTTCCCAAGGCACAGAGCAATGGGGCAGGACCCGCAAGCCCCTCACGGAGGCAGAGAAAAGAGAAAGTG
TTTTATATACGGTACTTATTTAATAGCCCTTTTTAATTAGAAATTAAAACAGTTAATTTAATTAAAGAGT
AGGGTTTTTTTCAGTATTCTTGGTTAATATTTAATTTCAACTATTTATGAGATGTATCTCTCGCTCTCTC
TTATTTGTACTTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTATGAAATCTGTGTT
TCCAATCTCTCTCTCCCAGATCGGTGACAGTCACTAGCTTGTCCTGAGAAGATATTTAATTTTGCTAACA
CTCAGCTCTGCCCTCCCTTGTCCCCACCACACATTCCTTTGAAATAAGGTTTCAATATACATTTACATAC
TATATATATATTTGGCAACTTGTGTTTGTATATAAATATATATATATATATATATGTTTATGTATATATG
TGATTCTGATAAAATAGACATTGCTATTCTGTTTTTTATATGTAAAAACAAAACAAGAAAAATAGAGAAT
TCTACATACTAAATCTCTCTCCTTTTTTAATTTTAATATTTGTTATCATTTATTTATTGGTGCTACTGTT
TATCCGTAATAATTGTGGGGGAAAAAGATATTAACATCACGTCTTTGTCTCTAGAGCAGTTTTCCGAGAT
ATTCCGTAGTACATATTTATTTTTAAACAGCAACAAAGAAATACAGATATATCTTAAAAAAAAAAGCATT
TTGTATTAAAGAATTGAATTCTGATCTCAAAAAAAAAAAAAAAAAAA"""

vegfa_nanostring_probe = """TCTCTCTCTCCCAGATCGGTGACAGTCACTAGCTTGTCCTGAGAAGATATTTAATTTTGCTAACACTCAGCTCTGCCCTCCCTTGTCCCCACCACACATT"""
vegfa_for = """aaaaacgaaagcgcaagaaa"""
vegfa_rev = """tttctccgctctgaacaagg"""
vegfa_random = """CAAGAGAAGACACGGTGGTGGAAGAAGAGGCCTGGTAATGGCCCCTCCTCCTGGGACCCCTTCGTCCTCTCCTTACCCCACCTCCTGGGTACAGCCC"""


match1, match2, change1, change2 = alignment(vegfa, vegfa_nanostring_probe)
match1, match2, change1, change2 = alignment(vegfa, compliment(vegfa_for))
sum(match1) + sum(match2)
match1, match2, change1, change2 = alignment(vegfa, vegfa_random)

